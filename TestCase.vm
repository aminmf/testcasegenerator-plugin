package generated;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.List;

import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.crawljax.core.configuration.CrawlSpecification;
import com.crawljax.core.configuration.CrawljaxConfiguration;
import com.crawljax.core.state.Identification;
import com.crawljax.core.state.Identification.How;
import com.crawljax.forms.FormInput;
import com.crawljax.plugins.testcasegenerator.TestSuiteHelper;

/*
 * Generated @ ${date}
 */

public class ${classname} {

    private static final String URL = "${url}";
	private static TestSuiteHelper testSuiteHelper;
	
	private static CrawljaxConfiguration getTestConfiguration() {
		CrawljaxConfiguration config = new CrawljaxConfiguration();
		CrawlSpecification crawler = new CrawlSpecification(URL);
		crawler.setWaitTimeAfterEvent(${waitAfterEvent});
		crawler.setWaitTimeAfterReloadUrl(${waitAfterReloadUrl});
		config.setCrawlSpecification(crawler);
#foreach( $plugin in $plugins )
		config.addPlugin(new ${plugin}());
#end
		return config;
	}	
	
	@BeforeClass
	public static void oneTimeSetUp(){
		try {
#if(${database})
			//use database for data
			testSuiteHelper = new TestSuiteHelper(
					getTestConfiguration());
#else
			//load needed data from xml files
			testSuiteHelper = new TestSuiteHelper(
					getTestConfiguration(),
					"${xmlstates}",
					"${xmleventables}", URL);
#end
		}
		catch (Exception e) {
			fail(e.getMessage());
		}
	}
	
	@AfterClass
	public static void oneTimeTearDown(){
		try {
			testSuiteHelper.tearDown();
		}catch (Exception e) {
			fail(e.getMessage());
		}
	}

	@Before
	public void setUp(){
		try {
			testSuiteHelper.goToInitialUrl();		
		}catch (Exception e) {
			fail(e.getMessage());
		}
	}	
	
	/*
	 * Test Cases
	 */
	 
#foreach( $method in $methodList )
	@Test
	public void method_${method.methodName}(){
		testSuiteHelper.newCurrentTestMethod("method_${method.methodName}");
		List<FormInput> formInputs;
		try {
#if(${method.methodName} != "method_0")
			assertTrue("Invariants satisfied in initial state" , testSuiteHelper.checkInvariants());
			
#end
#foreach( $event in $method.eventList )
#if(${event.properties.how} == "index")
			//initial state
#else
			//${event.properties.info}
#if($event.formInputs.size() > 0)
			formInputs = new ArrayList<FormInput>();
#foreach( $input in $event.formInputs )
			formInputs.add(new FormInput("${input.type}", new Identification(How.${input.how}, "${input.name}"), "${input.value}"));
#end			
			testSuiteHelper.handleFormInputs(formInputs);
			Thread.sleep(100);
#end
			assertTrue("Event fired: ${event.properties.text}", testSuiteHelper.fireEvent(${event.properties.id}));
#end
			testSuiteHelper.runInCrawlingPlugins();
			assertTrue("Invariants satisfied in state: ${event.properties.targetid}" , testSuiteHelper.checkInvariants());
			//assertTrue("State equivalent with: ${event.properties.targetid}", testSuiteHelper.compareCurrentDomWithState(${event.properties.targetid}));
			
#end
		} catch (Exception e) {
			fail(e.getMessage());
		}
	}

#end

}	 
